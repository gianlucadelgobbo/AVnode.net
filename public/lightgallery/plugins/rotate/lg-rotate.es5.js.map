{"version":3,"file":"lg-rotate.es5.js","sources":["../../../src/lg-events.ts","../../../src/plugins/rotate/lg-rotate-settings.ts","../../../src/plugins/rotate/lg-rotate.ts"],"sourcesContent":["import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n};\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * First time when an item is loaded lightGallery adds some delay for showing the completed item\n     * to show transition effect on item load\n     * Respect the delay when you use this event\n     */\n    delay: number;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n\n    /**\n     * True for first slide\n     */\n    isFirstSlide: boolean;\n}\n","export interface RotateSettings {\n    /**\n     * Enable/Disable rotate option\n     */\n    rotate: boolean;\n\n    /**\n     * Enable rotate left.\n     */\n    rotateLeft: boolean;\n\n    /**\n     * Enable rotate right.\n     */\n    rotateRight: boolean;\n\n    /**\n     * Enable flip horizontal.\n     */\n    flipHorizontal: boolean;\n\n    /**\n     * Enable flip vertical.\n     */\n    flipVertical: boolean;\n}\nexport const rotateSettings = {\n    rotate: true,\n    rotateLeft: true,\n    rotateRight: true,\n    flipHorizontal: true,\n    flipVertical: true,\n};\n","import { lGEvents } from '../../lg-events';\nimport { LgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { rotateSettings, RotateSettings } from './lg-rotate-settings';\n\nexport default class Rotate {\n    core: LightGallery;\n    settings: RotateSettings;\n    rotateValuesList!: {\n        [key: string]: any;\n    };\n    private $LG!: LgQuery;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...rotateSettings, ...this.core.settings };\n\n        return this;\n    }\n    buildTemplates(): void {\n        let rotateIcons = '';\n        if (this.settings.flipVertical) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-flip-ver\" aria-label=\"flip vertical\" class=\"lg-flip-ver lg-icon\"></button>';\n        }\n        if (this.settings.flipHorizontal) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-flip-hor\" aria-label=\"Flip horizontal\" class=\"lg-flip-hor lg-icon\"></button>';\n        }\n        if (this.settings.rotateLeft) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-rotate-left\" aria-label=\"Rotate left\" class=\"lg-rotate-left lg-icon\"></button>';\n        }\n        if (this.settings.rotateRight) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-rotate-right\" aria-label=\"Rotate right\" class=\"lg-rotate-right lg-icon\"></button>';\n        }\n        this.core.$toolbar.append(rotateIcons);\n    }\n\n    init(): void {\n        if (!this.settings.rotate) {\n            return;\n        }\n        this.buildTemplates();\n\n        // Save rotate config for each item to persist its rotate, flip values\n        // even after navigating to diferent slides\n        this.rotateValuesList = {};\n\n        // event triggered after appending slide content\n        this.core.LGel.on(`${lGEvents.afterAppendSlide}.rotate`, (event) => {\n            const { index } = event.detail;\n            const imageWrap = this.core\n                .getSlideItem(index)\n                .find('.lg-img-wrap')\n                .first();\n\n            imageWrap.wrap('lg-img-rotate');\n        });\n\n        this.core.outer\n            .find('#lg-rotate-left')\n            .first()\n            .on('click.lg', this.rotateLeft.bind(this));\n\n        this.core.outer\n            .find('#lg-rotate-right')\n            .first()\n            .on('click.lg', this.rotateRight.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-hor')\n            .first()\n            .on('click.lg', this.flipHorizontal.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-ver')\n            .first()\n            .on('click.lg', this.flipVertical.bind(this));\n\n        // Reset rotate on slide change\n        this.core.LGel.on(`${lGEvents.beforeSlide}.rotate`, (event) => {\n            if (!this.rotateValuesList[event.detail.index]) {\n                this.rotateValuesList[event.detail.index] = {\n                    rotate: 0,\n                    flipHorizontal: 1,\n                    flipVertical: 1,\n                };\n            }\n        });\n    }\n\n    applyStyles(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first();\n\n        $image.css(\n            'transform',\n            'rotate(' +\n                this.rotateValuesList[this.core.index].rotate +\n                'deg)' +\n                ' scale3d(' +\n                this.rotateValuesList[this.core.index].flipHorizontal +\n                ', ' +\n                this.rotateValuesList[this.core.index].flipVertical +\n                ', 1)',\n        );\n    }\n\n    rotateLeft(): void {\n        this.rotateValuesList[this.core.index].rotate -= 90;\n        this.applyStyles();\n    }\n\n    rotateRight(): void {\n        this.rotateValuesList[this.core.index].rotate += 90;\n        this.applyStyles();\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const st = this.$LG(el).style();\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            const values = tm.split('(')[1].split(')')[0].split(',') as any;\n            if (values) {\n                const angle = Math.round(\n                    Math.atan2(values[1], values[0]) * (180 / Math.PI),\n                );\n                return angle < 0 ? angle + 360 : angle;\n            }\n        }\n        return 0;\n    }\n\n    flipHorizontal(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipHorizontal';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipVertical';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n        this.applyStyles();\n    }\n\n    flipVertical(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipVertical';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipHorizontal';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n\n        this.applyStyles();\n    }\n\n    isImageOrientationChanged(): boolean {\n        const rotateValue = this.rotateValuesList[this.core.index];\n        const isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;\n        const ifFlippedHor = rotateValue.flipHorizontal < 0;\n        const ifFlippedVer = rotateValue.flipVertical < 0;\n        return isRotated || ifFlippedHor || ifFlippedVer;\n    }\n\n    closeGallery(): void {\n        if (this.isImageOrientationChanged()) {\n            this.core.getSlideItem(this.core.index).css('opacity', 0);\n        }\n        this.rotateValuesList = {};\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery rotate plugin\n        this.core.LGel.off('.lg.rotate');\n        this.core.LGel.off('.rotate');\n    }\n}\n"],"names":[],"mappings":"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"}